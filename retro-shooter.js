// Generated by CoffeeScript 1.6.3
var Player, RetroShooter,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Player = (function() {
  function Player() {}

  Player.prototype.x = 0;

  Player.prototype.y = 0;

  Player.prototype.rotation = 30;

  return Player;

})();

RetroShooter = (function() {
  RetroShooter.prototype.tickMs = 33;

  RetroShooter.prototype.canvas = null;

  RetroShooter.prototype.ctx = null;

  RetroShooter.prototype.width = 640;

  RetroShooter.prototype.height = 480;

  RetroShooter.prototype.player = new Player;

  function RetroShooter() {
    this.tick = __bind(this.tick, this);
    this.canvas = document.createElement('canvas');
    document.body.appendChild(this.canvas);
    this.canvas.width = this.width;
    this.canvas.height = this.height;
    this.ctx = this.canvas.getContext('2d');
    setInterval(this.tick, this.tickMs);
  }

  RetroShooter.prototype.tick = function() {
    this.update();
    return this.draw();
  };

  RetroShooter.prototype.update = function() {
    return 0;
  };

  RetroShooter.prototype.draw = function() {
    this.clear();
    return this.drawBackground();
  };

  RetroShooter.prototype.drawBackground = function() {
    var centerDirY, centreDirX, color, cosPerpDir, dir, dirX, dirY, dx, dy, height, pct, perpDir, raycast, sinPerpDir, x, _i, _ref, _results;
    this.ctx.lineWidth = 1;
    dir = this.toRadians(this.player.rotation);
    perpDir = this.toRadians(this.player.rotation + 90);
    sinPerpDir = Math.sin(perpDir);
    cosPerpDir = Math.cos(perpDir);
    centreDirX = 0.5 * Math.cos(dir);
    centerDirY = 0.5 * Math.sin(dir);
    _results = [];
    for (x = _i = 0, _ref = this.width; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
      pct = x / this.width - 0.5;
      dirX = pct * cosPerpDir + centreDirX;
      dirY = pct * sinPerpDir + centerDirY;
      raycast = this.raycast(dirX, dirY);
      color = raycast.color;
      dx = raycast.hitX - this.player.x - 0.5;
      dy = raycast.hitY - this.player.y - 0.5;
      height = (this.hypot(0.5, pct)) / (this.hypot(dx, dy)) * this.height / 2;
      _results.push(this.drawVerticalLine(color, x, height));
    }
    return _results;
  };

  RetroShooter.prototype.raycast = function(dirX, dirY) {
    return {
      color: 'blue',
      hitX: 2,
      hitY: 2
    };
  };

  RetroShooter.prototype.drawVerticalLine = function(color, x, height) {
    return this.drawLine(color, x + 0.5, this.height / 2 - height, x + 0.5, this.height / 2 + height);
  };

  RetroShooter.prototype.drawLine = function(color, x1, y1, x2, y2) {
    this.ctx.strokeStyle = color;
    this.ctx.beginPath();
    this.ctx.moveTo(x1, y1);
    this.ctx.lineTo(x2, y2);
    this.ctx.stroke();
    return this.ctx.closePath();
  };

  RetroShooter.prototype.clear = function() {
    this.ctx.fillStyle = 'black';
    return this.ctx.fillRect(0, 0, this.width, this.height);
  };

  RetroShooter.prototype.toRadians = function(x) {
    return x * Math.PI / 180;
  };

  RetroShooter.prototype.hypot = function(x, y) {
    return Math.sqrt(x * x, y * y);
  };

  return RetroShooter;

})();
